{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from astropy.io import ascii\n",
    "import matplotlib.pyplot as plt\n",
    "from itertools import cycle\n",
    "import numpy as np\n",
    "%matplotlib inline\n",
    "data = ascii.read('rad_testing.csv')\n",
    "from pylab import rcParams\n",
    "rcParams['figure.figsize'] = 14,9"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Source Radius Plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "uniqDSource = np.sort(list(set(data['rIn - r'])))\n",
    "uniqDOut = np.sort(list(set(data['rOut - rIn'])))\n",
    "plt.clf()\n",
    "sizeArr = np.linspace(5,100,len(uniqDSource))\n",
    "colArr = np.linspace(0.2,1,len(uniqDOut))\n",
    "for plotpass in ['first','second']:\n",
    "    for colval, dSource in zip(colArr,uniqDSource):\n",
    "        for sizeVal, dOut in zip(sizeArr,uniqDOut):\n",
    "            if plotpass == 'first':\n",
    "                if (dOut == np.median(uniqDOut)): label='R$_{In}$ - R$_{S}$='+str(dSource)\n",
    "                else: label=''\n",
    "            else:\n",
    "                if (dSource == np.median(uniqDSource)): label='R$_{Out}$ - R$_{In}$='+str(dOut)\n",
    "                else: label=''\n",
    "            pts = (data['rIn - r'] == dSource) & (data['rOut - rIn'] == dOut)\n",
    "            plt.scatter(data['r_source'][pts],data['norm_stdev'][pts],\n",
    "                        alpha=0.7,color=plt.cm.YlOrBr(colval),s=sizeVal,\n",
    "                        label=label)\n",
    "            plt.plot(data['r_source'][pts],data['norm_stdev'][pts],\n",
    "                     color=plt.cm.YlOrBr(colval),label='')\n",
    "plt.legend(loc='best',ncol=2,fontsize=12)\n",
    "plt.xlabel('R Source (px)')\n",
    "plt.ylabel('Normalized $\\sigma_F$')\n",
    "plt.ylim(0.0024,0.0036)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "plt.clf()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "uniqDOut"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
